# Log symmetric session key during TLS traffic (useful to decrypt SSL traffic)
#export SSLKEYLOGFILE=~/sslkeylog.log

# Define custom PATH
if [ -d "$SCRIPTS" ]; then
	export PATH="$SCRIPTS":"$PATH"
fi
if [ -d "$SOURCES/bin" ]; then
	export PATH="$SOURCES/bin":"$PATH"
fi
if [ -d "$REPOS/bin" ]; then
	export PATH="$REPOS/bin":"$PATH"
fi

# Google Workspace CLI
if [ -d "$HOME/bin/gam" ]; then
	export PATH="$HOME/bin/gam":"$PATH"
	alias _gam-upgrade="bash <(curl -s -S -L https://gam-shortn.appspot.com/gam-install) -l"
fi
if [ -d "$HOME/bin/gyb" ]; then
	export PATH="$HOME/bin/gyb":"$PATH"
	alias _gyb-upgrade="bash <(curl -s -S -L https://git.io/gyb-install) -l"
fi

# Emacs
if [ -d "$HOME/.config/emacs/bin" ]; then
	export PATH="$HOME/.config/emacs/bin":"$PATH"
fi

# Remove any duplicates from PATH environment variable
PATH="$(perl -e 'print join(":", grep { not $seen{$_}++ } split(/:/, $ENV{PATH}))')"

# Auto-start SSH agent
if [ "$(uname)" = "Linux" ] && { { [ ! -z "$SESSION" ] || [ ! -z "$GDMSESSION" ] ;} || { [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ] ;} ;}; then
	if find ~/.ssh/ -type f -regex ".*id_rsa.*" 2>/dev/null | grep -q 'id_rsa' && [ -z "$SSH_AUTH_SOCK" ]; then
  		eval $(ssh-agent)
		export SSH_AUTH_SOCK
		ssh-add -l >/dev/null || ssh-add
	fi
fi

# Define colors when displaying files on Linux
if [ "$(uname)" = "Linux" ]; then
	export LS_COLORS='rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lz=01;31:*.xz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.rar=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.axv=01;35:*.anx=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.axa=00;36:*.oga=00;36:*.spx=00;36:*.xspf=00;36:'
fi

# Allow files overwriting with >
set +o noclobber

# Colorize man pages
export LESS_TERMCAP_mb=$'\033[1;32m'
export LESS_TERMCAP_md=$'\033[1;32m'
export LESS_TERMCAP_me=$'\033[0m'
export LESS_TERMCAP_se=$'\033[0m'
export LESS_TERMCAP_so=$'\033[01;33m'
export LESS_TERMCAP_ue=$'\033[0m'
export LESS_TERMCAP_us=$'\033[1;4;31m'

# History configuration
HISTSIZE=1000000
SAVEHIST=1000000

# Disable 'less' history file
export LESSHISTFILE="-"

#---------------
# XDG Base Directory
#---------------

# Set the location where user-specific configurations should be written
export XDG_CONFIG_HOME="$HOME"/.config

# Set the location where user-specific non-essential data (cached) should be written
export XDG_CACHE_HOME="$HOME"/.cache

# Set the location where user-specific data files should be written
export XDG_DATA_HOME="$HOME"/.local/share

# Set the location where user-specific state files should be written
export XDG_STATE_HOME="$HOME"/.local/state

# Ansible
export ANSIBLE_CONFIG="${XDG_CONFIG_HOME:-$HOME/.config}/ansible/ansible.cfg"

# Docker
export DOCKER_CONFIG="$XDG_CONFIG_HOME"/docker

# FFmpeg
export FFMPEG_DATADIR="$XDG_CONFIG_HOME"/ffmpeg

# GNU screen
export SCREENRC="$XDG_CONFIG_HOME"/screen/screenrc

# GTK
export GTK_RC_FILES="$XDG_CONFIG_HOME"/gtk-1.0/gtkrc
export GTK2_RC_FILES="$XDG_CONFIG_HOME"/gtk-2.0/gtkrc
export QT_STYLE_OVERRIDE="Adwaita-Dark"

# MPlayer
export MPLAYER_HOME="$XDG_CONFIG_HOME"/mplayer

# MySQL
export MYSQL_HISTFILE="$XDG_DATA_HOME"/mysql_history

# NVIDIA Settings
export CUDA_CACHE_PATH="$XDG_CACHE_HOME"/nv

# Pass
export PASSWORD_STORE_DIR="$XDG_DATA_HOME"/password-store

# PostgreSQL
export PSQLRC="$XDG_CONFIG_HOME"/pg/psqlrc
export PSQL_HISTORY="$XDG_STATE_HOME"/psql_history
export PGPASSFILE="$XDG_CONFIG_HOME"/pg/pgpass
export PGSERVICEFILE="$XDG_CONFIG_HOME"/pg/pg_service.conf

# Python
export WORKON_HOME="$XDG_DATA_HOME"/virtualenvs

# Redis
export REDISCLI_HISTFILE="$XDG_DATA_HOME"/redis/rediscli_history
export REDISCLI_RCFILE="$XDG_CONFIG_HOME"/redis/redisclirc

# Ripgrep
export RIPGREP_CONFIG_PATH="$XDG_CONFIG_HOME"/ripgrep/config

# Shell
if [ "$SHELL" = "/bin/bash" ] || [ "$SHELL" = "/bin/zsh" ]; then
	if [ ! -d "$XDG_DATA_HOME" ]; then mkdir -pv "$XDG_DATA_HOME" > /dev/null 2>&1; fi
	HISTFILE="$XDG_DATA_HOME/shell_history"
fi

# TeXLive
export TEXMFHOME="$XDG_DATA_HOME/texmf"
export TEXMFVAR="$XDG_CACHE_HOME/texlive/texmf-var"
export TEXMFCONFIG="$XDG_CONFIG_HOME/texlive/texmf-config"

# TMUX
export TMUX_TMPDIR="$XDG_RUNTIME_DIR"

# Weechat
export WEECHAT_HOME="$XDG_CONFIG_HOME"/weechat

# Wget
export WGETRC="$XDG_CONFIG_HOME"/wget/wgetrc

#---------------
# Environment Variables
#---------------

# NNN
export NNN_OPTS="cadHQU"
export NNN_BMS="h:$HOME;d:$DOTFILES;s:$SCRIPTS"
export NNN_ARCHIVE="\\.(7z|bz2|gz|tar|tgz|zip)$"
export NNN_TMPFILE="/tmp/.lastd"
export NNN_OPENER="handler"

# YTFZF
export YTFZF_PLAYER="dmenu-video"

# If NVIM is installed, set it as default editor. Otherwise, fallback to vim or vi
export EDITOR="nvim"
export VISUAL="nvim"

# Configure terminal
if [ -z "$TMUX" ]; then
	export TERM=xterm-256color
fi

# Configure the default text Web browser
export BROWSERCLI="links"

# Configure locales
export LC_ALL="en_US.UTF-8"
export LANGUAGE="en_US.UTF-8"
export LANG="en_US.UTF-8"
export LC_CTYPE="en_US.UTF-8"

# Auto-start Tmux session
if [ -z "$SSH_CLIENT" ] || [ -z "$SSH_TTY" ]; then
  if [ ! -d "$XDG_CONFIG_HOME"/tmux/plugins/tpm ]; then
		echo -e "Installing TMUX Plugin Manager..."
    	git clone https://github.com/tmux-plugins/tpm "$XDG_CONFIG_HOME"/tmux/plugins/tpm > /dev/null 2>&1
		echo -e "TMUX Plugin Manager installed"
		echo -e
	fi
  if [ ! -d "$XDG_CONFIG_HOME"/tmux/plugins/tmux-sensible ]; then
		echo -e "Installing TMUX plugins..."
    	"$XDG_CONFIG_HOME"/tmux/plugins/tpm/bin/install_plugins > /dev/null 2>&1
		echo -e "TMUX plugins installed"
		echo -e
  fi
fi
if [ -z "$TMUX" ]; then
  tmux attach-session -t "$USER"0 || tmux new-session -s "$USER"0
fi
